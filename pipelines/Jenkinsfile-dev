    @Library('funcoes-auxiliares') _
    def version = null
    def artifactId = null
    pipeline {
      parameters {
        string(name: 'PROJECT_NAME', description: 'What is the project name?')
        string(name: 'APP_NAME', description: 'What is the application name?')
        string(name: 'GIT', description: 'What is the git repo?')
      }
      agent {
        node { label 'maven' }
      }
      options { skipStagesAfterUnstable() }
      stages {
        stage('Check out') {
          steps {
            script {
              echo "Checking out ${params.GIT}..."
              git url: "${params.GIT}"
              version = getVersionFromPom()
              artifactId = getArtifactIdFromPom()
            }
          }
        }
        stage('Package') {
          steps {
            withMaven( mavenSettingsConfig: 'maven-settings') {
              sh "mvn clean package -DskipTests"
            }
          }
        }
        stage('Sonar') {
          steps{
            withMaven( mavenSettingsConfig: 'maven-settings') {
              withSonarQubeEnv('Sonar 6.4') {
                sh 'mvn sonar:sonar'
              }
            } 
          }
        }
        stage('Quality Gate') {
          steps {
            script{
              timeout(time: 5, unit: 'MINUTES') {
                def qg = waitQualityGate()
                if (qg.status != 'OK') {
                  error "Falha devido má qualidade do código.\nStatus da análise: ${qg.status}"
                }
              }	
            }
          }
        }
        stage('Create Image Builder') {
          steps {
            script {
              openshift.withCluster() {
                openshift.withProject("${params.PROJECT_NAME}") {
                  echo "Using project: ${openshift.project()}"
                  if (!openshift.selector("bc", "${params.APP_NAME}").exists()) {
                    openshift.newBuild("--name=${params.APP_NAME}", "--image-stream=redhat-openjdk18-openshift:1.8", "--binary")
                  }
                }
              }
            }
          }
        }
        stage('Build Image') {
          steps {
            script {
              openshift.withCluster() {
                openshift.withProject("${params.PROJECT_NAME}") {
                  echo "Using project: ${openshift.project()}"
                  openshift.selector("bc", "${params.APP_NAME}").startBuild("--from-file=target/${artifactId}-${version}.jar", "--wait")
                }
              }
            }
          }
        }
        stage('Promote to DEV') {
          steps {
            script {
              openshift.withCluster() {
                openshift.withProject("${params.PROJECT_NAME}") {
                  openshift.tag("${params.APP_NAME}:latest", "${params.APP_NAME}:${version}")
                }
              }
            }
          }
        }
        stage('Create ServiceAccount') {
          steps {
            script {
              openshift.withCluster() {
                openshift.withProject("${params.PROJECT_NAME}") {
                  if (!openshift.selector('sa', "${params.APP_NAME}").exists()) {
                    openshift.create('sa', "${params.APP_NAME}")
                  }
                  openshift.raw('policy', 'add-role-to-user', 'view', "system:serviceaccount:${params.PROJECT_NAME}:${params.APP_NAME}")
                }
              }
            }
          }
        }
        stage('Create DEV') {
          steps {
            script {
              openshift.withCluster() {
                openshift.withProject("${params.PROJECT_NAME}") {
                  if (!openshift.selector('dc', "${params.APP_NAME}").exists()) {
                    openshift.newApp("springboot-deployconfig", "--name=${params.APP_NAME}", "-p APP_NAME=${params.APP_NAME}",
                      "-p NAMESPACE=${params.PROJECT_NAME}","-p TAG_NAME=latest", "-p SERVICE_ACCOUNT=${params.APP_NAME}")
                  }
                }
              }
            }
          }
        }
      }
    }
